<?php
// $Id$
/**
 * @file
 * This is the install file of the Shibboleth authentication module for Drupal system
 *
 */

/**
 * Implementation of hook_install().
 *
 * Hook to install module, and enable it as a block
 */
function shib_auth_install() {
  drupal_install_schema('shib_auth');

  // Place block into the 'blocks' table manually
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      // Delete block from database for version changes
      $block_query = db_query("SELECT * FROM {blocks} WHERE module = 'shib_auth'");
      if (!db_fetch_object($block_query)) {
        db_query("INSERT INTO {blocks} (visibility, pages, custom, title, module, theme, status, weight, delta, cache, region) VALUES(%d, '%s', %d, '%s', '%s', '%s', %d, %d, '%s', %d, '%s')", 0, '', 0, '', 'shib_auth', $theme->name, TRUE, 0, 0, BLOCK_NO_CACHE, 'left');
      }
    }
  }
  cache_clear_all(NULL, 'cache_block');

  drupal_set_message(t('Shibboleth authentication module installed successfully.'));
}

/**
 * Implementation of hook_uninstall().
 *
 * Hook to uninstall variables and the block, witch were created and used by the module
 */
function shib_auth_uninstall() {

  // Drop variables.
  $variables = array(
    'auth_link_text',
    'shib_auth_handler_url',
    'shib_auth_handler_protocol',
    'shib_auth_wayf_uri',
    'shib_auth_full_handler_url',
    'shib_auth_full_logout_url',
    'shib_auth_username_variable',
    'shib_auth_username_email',
    'shib_auth_auto_destroy_session',
    'shib_logout_url',
    'shib_auth_debug_state',
    'shib_auth_debug_url',
    'shib_auth_enable_custom_mail',
    'shib_auth_define_username',
    'shib_auth_account_linking',
    'shib_auth_is_passive',
    'shib_auth_forceauthn',
    'shib_auth_terms_accept',
    'shib_auth_terms_url',
    'shib_auth_terms_ver'
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  // Remove block from the 'blocks' table manually
  db_query("DELETE FROM {blocks} WHERE module = 'shib_auth'");
  cache_clear_all(NULL, 'cache_block');

  drupal_uninstall_schema('shib_auth');

  drupal_set_message(t('The Shibboleth authentication module was uninstalled successfully.'));
}

/**
 * Implementation of hook_update().
 *
 * Hook to update module from older revisions
 * @return an array with the executed SQL commands
 */
function shib_auth_update_6040() {
  variable_set('shib_auth_full_logout_url', variable_get('shib_auth_handler_protocol', 'https') .'://'. $_SERVER['HTTP_HOST'] . variable_get('shib_auth_handler_url', '/Shibboleth.sso') .'/Logout');
  variable_set('shib_auth_full_handler_url', variable_get('shib_auth_handler_protocol', 'https') .'://'. $_SERVER['HTTP_HOST'] . variable_get('shib_auth_handler_url', '/Shibboleth.sso') . variable_get('shib_auth_wayf_uri', '/DS'));
  $ret = array();
  $schema = shib_auth_schema();
  $tables = array('shib_auth', 'shib_authmap');
  // make sure these tables exist
  foreach ($tables AS $table) {
    if (!db_table_exists($table)) {
      db_create_table($ret, $table, $schema[$table]);
    }
  }
  // copy the elements of authmap to the database shib_auth module uses, and left idp field empty
  $entries = db_query("SELECT * FROM {authmap} WHERE module='shib_auth'");
  while ($entry = db_fetch_array($entries)) {
    if ($entry['uid']>1) {
      $ret[] = update_sql("INSERT INTO {shib_authmap} (uid, targeted_id, created) VALUES  ('". $entry['uid'] ."',
                                                                                           '". $entry['authname'] ."',
                                                                                           '". date("Y-m-d H:i:s") ."')");
    }
  }
  return $ret;
}
/**
 * Implementation of hook_schema().
 *
 * This is how the schema of the module will look like
 */
function shib_auth_schema() {
  $schema['shib_authmap'] = array(
    'description' => t('Stores shibboleth authentication mapping from persistend IDs to drupal users.'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t("The id of the authentication mapping rule"),
      ),
      'uid' => array(
        'type' => 'int',
        'size' => 'small',
        'default' => -1,
        'description' => t("The user id, which the persistent ID will be mapped to"),
      ),
      'targeted_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'not null' => TRUE,
        'description' => t("The persistent ID, which will be mapped to a drupal uid"),
      ),
      'idp' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => t("The IdP, the user got her creditentials"),
      ),
      'consentver' => array(
        'type' => 'varchar',
        'length' => 16,
        'default' => '',
        'description' => t("The version of terms and conditions, which was accepted by the user"),
      ),
      'created' => array(
        'type' => 'datetime',
        'description' => t("Date and time the mapping was created"),
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array('targeted_id' => array('targeted_id'), ),
  );

  return $schema;
}
