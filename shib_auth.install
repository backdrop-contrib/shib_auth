<?php

/**
 * @file
 * Install file of the Shibboleth authentication module for Drupal system.
 */

/**
 * Implements hook_schema().
 *
 * This is how the schema of the module will look like.
 */
function shib_auth_schema() {
  $schema = array();

  $schema['shib_authmap'] = array(
    'description' => 'Stores shibboleth authentication mapping from persistent IDs to drupal users.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The id of the authentication mapping rule',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid, which the persistent ID will be mapped to',
      ),
      'targeted_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'not null' => TRUE,
        'description' => 'The persistent ID, which will be mapped to a drupal uid',
      ),
      'idp' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => 'The IdP, the user got her credentials',
      ),
      'consentver' => array(
        'type' => 'varchar',
        'length' => 16,
        'default' => '',
        'description' => 'The version of terms and conditions, which was accepted by the user',
      ),
      'created' => array(
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'description' => 'Timestamp the mapping was created',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array('targeted_id' => array('targeted_id')),
  );

  $schema['shib_auth'] = array(
    'description' => 'Stores shibboleth authentication rules',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The id of the Shibboleth role assignment rule',
      ),
      'field' => array(
        'type' => 'varchar',
        'length' => 128,
        'default' => '',
        'description' => 'The observed server variable.',
      ),
      'regexpression' => array(
        'type' => 'varchar',
        'length' => 128,
        'default' => '',
        'description' => 'The joint regular expression.',
      ),
      'role' => array(
        'type' => 'varchar',
        'length' => 128,
        'default' => '',
        'description' => 'The assigned role.',
      ),
      'sticky' => array(
        'type' => 'int',
        'default' => 0,
        'description' => 'Sticky status',
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function shib_auth_menu_update_last_removed() {
  return 7001;
}

/**
 * From variable to config.
 */
function shib_auth_menu_update_1000() {
  global $base_url;
  $t = get_t();
  $config = config('shib_auth.settings');
  $config->set('link_text', update_variable_get('shib_auth_link_text', $t('Shibboleth Login')));
  $config->set('handler_url', update_variable_get('shib_auth_handler_url', '/Shibboleth.sso'));
  $config->set('handler_protocol', update_variable_get('shib_auth_handler_protocol', 'https'));
  $config->set('wayf_uri', update_variable_get('shib_auth_wayf_uri', '/DS'));
  $config->set('full_handler_url', update_variable_get('shib_auth_full_handler_url', $base_url . '/DS'));
  $config->set('full_logout_url', update_variable_get('shib_auth_full_logout_url', url('<front>')));
  $config->set('username_variable', update_variable_get('shib_auth_username_variable', 'REMOTE_USER'));
  $config->set('email_variable', update_variable_get('shib_auth_email_variable', 'HTTP_SHIB_MAIL'));
  $config->set('auto_destroy_session', update_variable_get('shib_auth_auto_destroy_session', FALSE));
  $config->set('logout_url', update_variable_get('shib_auth_logout_url', url('<front>')));
  $config->set('login_url', update_variable_get('shib_auth_login_url', ''));
  $config->set('debug_state', update_variable_get('shib_auth_debug_state', FALSE));
  $config->set('debug_url', update_variable_get('shib_auth_debug_url', ''));
  $config->set('enable_custom_mail', update_variable_get('shib_auth_enable_custom_mail', FALSE));
  $config->set('define_username', update_variable_get('shib_auth_define_username', FALSE));
  $config->set('account_linking', update_variable_get('shib_auth_account_linking', FALSE));
  $config->set('account_linking_text', update_variable_get('shib_auth_account_linking_text', $t('Link this account with another identity')));
  $config->set('is_passive', update_variable_get('shib_auth_is_passive', FALSE));
  $config->set('forceauthn', update_variable_get('shib_auth_forceauthn', FALSE));
  $config->set('terms_accept', update_variable_get('shib_auth_terms_accept', FALSE));
  $config->set('terms_url', update_variable_get('shib_auth_terms_url', '/'));
  $config->set('terms_ver', update_variable_get('shib_auth_terms_ver', ''));
  $config->set('force_https', update_variable_get('shib_auth_force_https', FALSE));
  $config->set('version', update_variable_get('shib_auth_version', ''));
  $config->save();

  update_variable_del('shib_auth_link_text');
  update_variable_del('shib_auth_handler_url');
  update_variable_del('shib_auth_handler_protocol');
  update_variable_del('shib_auth_wayf_uri');
  update_variable_del('shib_auth_full_handler_url');
  update_variable_del('shib_auth_full_logout_url');
  update_variable_del('shib_auth_username_variable');
  update_variable_del('shib_auth_email_variable');
  update_variable_del('shib_auth_auto_destroy_session');
  update_variable_del('shib_auth_logout_url');
  update_variable_del('shib_auth_login_url');
  update_variable_del('shib_auth_debug_state');
  update_variable_del('shib_auth_debug_url');
  update_variable_del('shib_auth_enable_custom_mail');
  update_variable_del('shib_auth_define_username');
  update_variable_del('shib_auth_account_linking');
  update_variable_del('shib_auth_account_linking_text');
  update_variable_del('shib_auth_is_passive');
  update_variable_del('shib_auth_forceauthn');
  update_variable_del('shib_auth_terms_accept');
  update_variable_del('shib_auth_terms_url');
  update_variable_del('shib_auth_terms_ver');
  update_variable_del('shib_auth_force_https');
  update_variable_del('shib_auth_version');
}
