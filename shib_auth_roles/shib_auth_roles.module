<?php
// $Id: shib_auth.module,v 1.3.4.5.2.31 2009/09/30 17:00:49 bajnokk Exp $

/**
 * @file
 * This is a Shibboleth authentication module.
 *
 * This module allow administrators to enable Shibboleth based authentication on their drupal installation.
 */

/**
 * Implements hook_menu().
 */
function shib_auth_roles_menu()
{
  $items = array();
  
  $items['admin/user/shib_auth/rules'] = array(
    'title' => t('Shibboleth group rules'),
    'description' => t('Administer attribute-based role assignment'),
    'page callback' => '_shib_auth_list_rules',
    'page arguments' => array(
      'shib_auth_list_rules'
    ),
    'access arguments' => array(
      'administer permissions'
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
    'file' => 'shib_auth_roles_forms.inc'
  );
  
  $items['admin/user/shib_auth/new'] = array(
    'title' => t('Add new rule'),
    'description' => t('Add new attribute-based role assignment rule'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'shib_auth_new_rule'
    ),
    'access arguments' => array(
      'administer permissions'
    ),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -7,
    'file' => 'shib_auth_roles_forms.inc'
  );
  
  $items['admin/user/shib_auth/delete/%'] = array(
    'title' => 'Delete rule',
    'page callback' => '_shib_auth_delete_rule',
    'page arguments' => array(
      4
    ),
    'access arguments' => array(
      'administer permissions'
    ),
    'type' => MENU_CALLBACK,
    'file' => 'shib_auth_roles_forms.inc'
  );
  
  $items['admin/user/shib_auth/edit/%'] = array(
    'title' => 'Edit rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'shib_auth_edit_rule',
      4
    ),
    'access arguments' => array(
      'administer permissions'
    ),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'shib_auth_roles_forms.inc'
  );
  
  $items['admin/user/shib_auth/clone/%'] = array(
    'title' => 'Edit rule',
    'page callback' => '_shib_auth_clone_rule',
    'page arguments' => array(
      4
    ),
    'access arguments' => array(
      'administer permissions'
    ),
    'type' => MENU_CALLBACK,
    'file' => 'shib_auth_roles_forms.inc'
  );
  
  
  return $items;
} // function shib_auth_roles_menu()

function shib_auth_roles_get_role_by_id($id)
{
  // Create query parameters
  
  $params = sprintf("SELECT name FROM {role} WHERE rid = '%s'", $id);
  // retrieve roles from system
  $result = db_query($params);
  
  while ($row = db_fetch_array($result)) {
    $role = $row['name'];
  }
  
  return $role;
}
/**
 * The admin can define authorization rules based on the server variables 
 * (possibly provided by Shibboleth IdP) to give roles to users.
 * The rules can be defined as a [server field - Regexp - role(s)] triplet
 */
function shib_auth_assignroles()
{
  global $user;
  $profile_changed=0;
  
  // Store roles for further examination
  $former_roles = serialize($user->roles);
  
  // Sticky rules come first
  $rules = db_query("SELECT * FROM {shib_auth} ORDER BY sticky DESC");
  while ($rule = db_fetch_array($rules)) {
    if($profile_changed && !$rule['sticky']) {
      // This is the first non-sticky rule, and sticky rules have modified the user's roles
      shib_auth_save_roles();
      $profile_changed = 0;
    }
    $profile_changed += shib_auth_process_rule($rule); // Only sticky rules return >0
  }
  if ($profile_changed) // must do this in case there's no non-sticky rule
    shib_auth_save_roles();

  $user->roles = array_filter($user->roles);
  
  // If the user roles array has been changed then reset the permission cache
  if (serialize($user->roles) != $former_roles) {
    // Hack to reset the permissions
    user_access('access content', $account, TRUE);
  }
  $_SESSION['rolelog'] = '1';
}

function shib_auth_process_rule($rule)
{
  global $user;
  $profile_changed=0; // is a constant 0 when the rule is not a sticky one
  $fieldname  = $rule['field'];
  $expression = '/' . urldecode($rule['regexpression']) . '/';
  // if the given server field exists
  if (isset($_SERVER[$fieldname])) {
    foreach (explode(';', $_SERVER[$fieldname]) as $value) {
      //check if the RegEx fits to one of the value of the server field
      if (preg_match($expression, trim($value))) {
	$roles = unserialize($rule['role']);
	// there is a match, so give this user the specified role(s)
	
	if (empty($roles)) // null-rule, NOP
	  return 0;
	
	foreach ($roles as $role_id) {
	  $role_name = shib_auth_get_rolename($role_id);
	  if ($user->roles[$role_id] == $role_name) 
	    continue; // NOP if the user already has the given role
	  
	  $user->roles[$role_id] = $role_name;
	  
	  if ($rule['sticky']) { // Sticky rules change the profile
	    $profile_changed = 1;
	    
	    if (!isset($_SESSION['rolelog']))
	      watchdog('shib_grant_stick', 'Role "@id" has been permanently granted', array(
		'@id' => $role_name
	      ), WATCHDOG_NOTICE);
	  } else {
	    if (!isset($_SESSION['rolelog']))
	      watchdog('shib_grant_role', 'Role "@id" has been granted', array(
		'@id' => $role_name
	      ), WATCHDOG_NOTICE);
	  }
	}
      }
    }
  }
  
  return $profile_changed;
}

/** 
 *  Unfortunately if we called user_save() on updating roles, we would possibly lose profile fields.
 *  Therefore we hack with the {users_roles} table
 */
function shib_auth_save_roles() 
{
  global $user;
  
  // We won't modify system users
  if (!$user->uid || $user->uid <= 1)
    return;
  
  if (isset($user->roles)) {
    db_query('DELETE FROM {users_roles} WHERE uid = %d', $user->uid);
    foreach (array_keys($user->roles) as $rid) {
      if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
	db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $user->uid, $rid);
      }
    }
  }
}


function shib_auth_roles_generate_rolenames() {
  if (!isset($_SESSION['shib_auth_rolecache'])) {
  $query = db_query('SELECT rid, name FROM {role}');
  while ($item = db_fetch_array($query))
    $rolecache[$item['rid']] = $item['name'];

  $_SESSION['shib_auth_rolecache'] = $rolecache;
  }
}

function shib_auth_roles_get_rolename($rid) {
  return $_SESSION['shib_auth_rolecache'][$rid];
}

/**
 * This function also gives roles to the user, if certain server fields were provided by the Shibboleth server
 */
function shib_auth_roles_init()
{
  module_load_include('inc', 'shib_auth_roles', 'forms');
    shib_auth_roles_generate_rolenames();

  if (shib_auth_session_valid() && !user_is_anonymous()){ 

    shib_auth_assignroles();
  }
	//if this module is loaded, let we debug the newly assigned roles too - see shib_auth.module
	shib_auth_debug();
} // function shib_auth_roles_init()


function shib_auth_roles_user($op, &$edit, &$account, $category = NULL)
{
  global $base_url, $user;
  if ($op == "logout") {
    unset($_SESSION['rolelog']);
  }
}
