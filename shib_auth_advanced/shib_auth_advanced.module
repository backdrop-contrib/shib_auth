<?php
// $Id: shib_auth.module,v 1.3.4.5.2.31 2009/09/30 17:00:49 bajnokk Exp $
/**
 * @file
 * This is a Shibboleth authentication module.
 *
 * This module allow administrators to enable Shibboleth based authentication on their drupal installation.
 */

/**
 * Implements hook_menu().
 */
function shib_auth_advanced_menu() {
  $items = array();

      $items['admin/user/shib_auth/advanced'] = array(
    'title'            => t('Advanced settings'),
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('shib_auth_advanced_admin_advanced'),
    'access arguments' => array('administer shibboleth authentication'),
    'weight'           => -6,
    'file' => 'shib_auth_advanced_forms.inc',
  );

  $items['admin/user/shib_auth'] = array(
    'title'            => t('Shibboleth settings'),
    'description'      => t('Settings of the Shibboleth authentication module'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('shib_auth_admin_general'),
    'access arguments' => array('administer shibboleth authentication'),
    'file' => 'shib_auth_forms.inc',
  );

  $items['admin/user/shib_auth/general'] = array(
    'title'            => t('General settings'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer shibboleth authentication'),
    'weight'           => -10,
    'file' => 'shib_auth_forms.inc',
  );
  return $items;
} // function shib_auth_roles_menu()
/**
 * This footer part executes isPassive script, if the option was checked on the configuration page
 */
function shib_auth_advanced_footer() {
  global $user;
  if (!shib_auth_session_valid() && $shib_auth_config['ispassive'] && !$user->uid) {
    $base = drupal_get_path('module', 'shib_auth');
    //TODO
    //A lot of parameterizing stuff, the script is pretty general now, the urls need to be generated based on handler/wayf/login/logout configs
    //Any1 good at that? ;)
    drupal_add_js($base.'/isPassive.js','module','footer');
  }
}
/**
 * If any customization or consent option is checked, the custom form will show up before registering.
 * 
 */
function shib_auth_advanced_custom_form($umail_single, $uname) {
  global $shib_auth_config;
    if ($shib_auth_config['override_email'] || 
				($umail_single && $shib_auth_config['override_username']) ||
				$shib_auth_config['req_consent']) {
            // if custom something was enabled on the admin form, save it as a variable
            if ($_POST['form_id'] == 'shib_auth_custom_form') {
							if ($_POST['custom_mail'])			$custom_mail = $_POST['custom_mail'];
							if ($_POST['custom_username']) 	$custom_username = $_POST['custom_username'];
							if ($_POST['accept'])           $accept = $_POST['accept'];
						}
// ****** CUSTOM MAIL **********
              //if the user provided the custom mail string on the custom data form, and it is not empty
            if (isset($custom_mail) && $custom_mail) {
              if (($accept && $shib_auth_config['req_consent']) ||
									!$shib_auth_config['req_consent']) {
		if (!valid_email_address($custom_mail)) {
		  shib_auth_error("Please enter a valid e-mail address");
		}
		// if custom username not enabled
		else if (variable_get('shib_auth_define_username', 0)==0)  {
		  // and email isn't used by another registered drupal user
		    shib_login_save_authmap($uname, $uname, $custom_mail);
		}
		//if the username is also enabled
		else if ((variable_get('shib_auth_define_username', 0)==1)&&isset($custom_username) && $custom_username) {
		  if ($error = user_validate_name($custom_username)) 
		    shib_auth_error($error);
		  else {
		    // and it isn't used by another registered drupal user
                $un_already_used_query = db_query("SELECT * FROM {users} WHERE name='%s'", $custom_username);
                $un_already_used = db_fetch_object($un_already_used_query);
                if ($un_already_used) {
                  shib_auth_error("Error saving user account. User name is already used.");
                }
                //register the user with the given address, and the shib provided username
                else {
                  shib_login_save_authmap($uname, $custom_username, $custom_mail);
                }
              }
            }
           } else shib_auth_error("You have to accept Terms and conditions to proceed");
          }

// ****** CUSTOM USERNAME **********
          //if there is no custom email option, but the user can define custom username
          else if ($shib_auth_config['override_username'] && isset($custom_username) && $custom_username)        {
          if (($accept && $shib_auth_config['req_consent']) || !$shib_auth_config['req_consent']) {
          //validate it
            if ($error = user_validate_name($custom_username)) 
              shib_auth_error($error);
            else {
              $un_already_used_query = db_query("SELECT * FROM {users} WHERE name='%s'", $custom_username);
              $un_already_used = db_fetch_object($un_already_used_query);
              if ($un_already_used) {
                shib_auth_error("Error saving user account. User name is already used.");
              }
              //register the user with the given username, and the shib provided e-mail address
              else {
                  shib_login_save_authmap($uname, $custom_username, $umail_single);
                }
            }
          }
          else shib_auth_error("You have to accept Terms and conditions to proceed");
          }
// ****** USER CONSENT **********
          else if (isset($accept) && $accept && $shib_auth_config['req_consent']) {          
              shib_login_save_authmap($uname, $uname, $umail_single);
          }
// ****** SHOW FORM, AND REDIRECT ********
          //We want to show the custom mail input form, and then redirect the user to the node, he wanted to go
          else if ($_GET['q']!='shib_auth/get_custom_data') {
          
							$_SESSION['redirected_to_custom_data_form'] = TRUE;
              $_SESSION['redirected_to_custom_data_form_url'] = $_GET['q'];
							drupal_goto('shib_auth/get_custom_data'); 
          }
          
            //then the user is redirected to the page, which she wanted to open before the auth process had been initiatedd
            
           if (isset($_SESSION['redirected_to_custom_data_form_url'])) {
              $redirect_url = $_SESSION['redirected_to_custom_data_form_url'];
              unset($_SESSION['redirected_to_custom_data_form_url']);
              drupal_goto($redirect_url); 
            }
        }
}

/**
 * This function also gives roles to the user, if certain server fields were provided by the Shibboleth server
 */
function shib_auth_advanced_init() {
	module_load_include('inc', 'shib_auth_advanced', 'forms');
	if (shib_auth_session_valid())
		return true;
} // function shib_auth_roles_init()


